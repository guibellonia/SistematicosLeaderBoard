import { Hono } from 'npm:hono@4.6.1'
import { cors } from 'npm:hono/cors'
import { logger } from 'npm:hono/logger'
import { createClient } from 'npm:@supabase/supabase-js@2'
import * as kv from './kv_store.tsx'

type Database = {
  kv_store_cc2c4d6e: {
    Row: {
      key: string
      value: any
      created_at: string
      updated_at: string
    }
    Insert: {
      key: string
      value: any
      created_at?: string
      updated_at?: string
    }
    Update: {
      key?: string
      value?: any
      created_at?: string
      updated_at?: string
    }
  }
}

const app = new Hono()

app.use('*', cors({
  origin: '*',
  allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowHeaders: ['Content-Type', 'Authorization'],
}))

const supabase = createClient<Database>(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
)

// Middleware para logging
app.use('*', logger(console.log))

// Middleware para autentica√ß√£o usando Supabase JWT
async function authMiddleware(c: any, next: any) {
  const authHeader = c.req.header('Authorization')
  const endpoint = c.req.path
  
  console.log(`üîê Middleware auth - Endpoint: ${endpoint}, Auth Header: ${authHeader ? 'presente' : 'ausente'}`)
  
  if (!authHeader) {
    console.log(`‚ùå Sem header de autoriza√ß√£o para ${endpoint}`)
    return c.json({ code: 401, message: 'Token de autoriza√ß√£o necess√°rio' }, 401)
  }

  const token = authHeader.replace('Bearer ', '')
  console.log(`üîê Token JWT recebido: ${token.substring(0, 20)}...`)
  
  try {
    // Verificar o JWT com Supabase
    const { data: { user }, error } = await supabase.auth.getUser(token)
    
    if (error || !user) {
      console.log(`‚ùå Token JWT inv√°lido: ${error?.message || 'Usu√°rio n√£o encontrado'}`)
      return c.json({ code: 401, message: 'Invalid JWT' }, 401)
    }

    console.log(`‚úÖ JWT v√°lido para usu√°rio: ${user.id}`)
    
    // Extrair username do email ou metadata
    const email = user.email || ''
    const username = user.user_metadata?.username || email.split('@')[0]
    
    console.log(`üîç Buscando dados do usu√°rio: ${username}`)
    
    // Buscar dados do usu√°rio no nosso sistema
    let userData = await kv.get(`user:${username}`)
    
    if (!userData) {
      // Se o usu√°rio n√£o existe no nosso sistema, criar
      console.log(`üìù Criando novo usu√°rio no sistema: ${username}`)
      userData = {
        id: user.id,
        username: username,
        points: 0,
        totalPoints: 0,
        rank: 1,
        achievements: [],
        avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${username}`,
        joinedAt: new Date().toISOString(),
        createdAt: user.created_at,
      }
      
      await kv.set(`user:${username}`, userData)
      await kv.set(`user:id:${user.id}`, username)
      
      // Atualizar leaderboard
      await updateLeaderboard()
    }
    
    console.log(`‚úÖ Autentica√ß√£o bem-sucedida para: ${userData.username}`)
    c.set('currentUser', userData)
    c.set('isAuthenticated', true)
    c.set('supabaseUser', user)
    await next()
    return
  } catch (error) {
    console.error(`‚ùå Erro na verifica√ß√£o do JWT:`, error)
    return c.json({ code: 401, message: 'Invalid JWT' }, 401)
  }
}

// Middleware para endpoints p√∫blicos (permite token p√∫blico ou JWT)
async function publicMiddleware(c: any, next: any) {
  const authHeader = c.req.header('Authorization')
  const endpoint = c.req.path
  
  console.log(`üåê Middleware p√∫blico - Endpoint: ${endpoint}, Auth Header: ${authHeader ? 'presente' : 'ausente'}`)
  
  if (!authHeader) {
    // Se n√£o h√° header, permitir acesso p√∫blico limitado
    console.log(`üîì Acesso p√∫blico sem autentica√ß√£o para ${endpoint}`)
    c.set('isPublic', true)
    c.set('isAuthenticated', false)
    await next()
    return
  }

  const token = authHeader.replace('Bearer ', '')
  
  // Se for o token p√∫blico, permitir acesso limitado
  if (token === Deno.env.get('SUPABASE_ANON_KEY')) {
    console.log(`üîì Acesso p√∫blico com token anon para ${endpoint}`)
    c.set('isPublic', true)
    c.set('isAuthenticated', false)
    await next()
    return
  }

  // Tentar verificar se √© um JWT v√°lido do Supabase
  try {
    const { data: { user }, error } = await supabase.auth.getUser(token)
    
    if (!error && user) {
      console.log(`‚úÖ JWT v√°lido detectado em endpoint p√∫blico: ${user.id}`)
      
      // Buscar dados do usu√°rio
      const email = user.email || ''
      const username = user.user_metadata?.username || email.split('@')[0]
      const userData = await kv.get(`user:${username}`)
      
      if (userData) {
        console.log(`‚úÖ Usu√°rio autenticado em endpoint p√∫blico: ${userData.username}`)
        c.set('currentUser', userData)
        c.set('isAuthenticated', true)
        c.set('supabaseUser', user)
        await next()
        return
      }
    }
  } catch (error) {
    console.log(`üîç Token n√£o √© JWT v√°lido, permitindo acesso p√∫blico`)
  }

  // Se chegou aqui, permitir acesso p√∫blico
  console.log(`üîì Acesso p√∫blico para ${endpoint}`)
  c.set('isPublic', true)
  c.set('isAuthenticated', false)
  await next()
}

// Rotas do sistema Sistem√°ticos de Plant√£o

// üîê AUTH - Registro usando Supabase Admin API
app.post('/make-server-cc2c4d6e/auth/register', publicMiddleware, async (c) => {
  try {
    const { username, password } = await c.req.json()
    
    console.log(`üîÑ REGISTRO: Iniciando para ${username} com senha de ${password?.length || 0} caracteres`)
    
    if (!username || !password) {
      console.log('‚ùå REGISTRO: Dados faltando')
      return c.json({ error: 'Username e password s√£o obrigat√≥rios' }, 400)
    }

    // Verificar se usu√°rio j√° existe no nosso sistema
    const existingUser = await kv.get(`user:${username.toLowerCase()}`)
    if (existingUser) {
      console.log(`‚ÑπÔ∏è REGISTRO: Usu√°rio ${username.toLowerCase()} j√° existe no sistema`)
      return c.json({ success: true, user: existingUser, message: 'Usu√°rio j√° existe' })
    }

    console.log(`üìù REGISTRO: Criando usu√°rio via Admin API: ${username.toLowerCase()}`)
    console.log(`üìù REGISTRO: Email ser√°: ${username.toLowerCase()}@sistematics.local`)
    
    // Criar usu√°rio via Supabase Admin API
    const { data, error } = await supabase.auth.admin.createUser({
      email: `${username.toLowerCase()}@sistematics.local`,
      password: password,
      user_metadata: { 
        username: username.toLowerCase(),
        display_name: username 
      },
      // Confirmar email automaticamente j√° que n√£o temos servidor de email configurado
      email_confirm: true
    })

    console.log(`üìù REGISTRO: Resposta da Admin API:`, { 
      success: !error,
      userId: data?.user?.id,
      errorMessage: error?.message 
    })

    if (error) {
      console.error('‚ùå Erro do Supabase Admin:', error)
      
      // Se o usu√°rio j√° est√° registrado no Supabase, verificar se existe no nosso sistema
      if (error.message.includes('User already registered') || error.message.includes('already been registered')) {
        console.log('‚ÑπÔ∏è Usu√°rio j√° registrado no Supabase, verificando dados locais...')
        
        // Buscar no nosso sistema
        const localUser = await kv.get(`user:${username.toLowerCase()}`)
        if (localUser) {
          console.log('‚úÖ Usu√°rio encontrado no sistema local tamb√©m')
          return c.json({ success: true, user: localUser, message: 'Usu√°rio j√° registrado' })
        } else {
          console.log('‚ö†Ô∏è Usu√°rio existe no Supabase mas n√£o no sistema local, isso √© um problema')
          return c.json({ error: 'Usu√°rio parcialmente registrado. Tente fazer login.' }, 409)
        }
      }
      
      // Outros erros
      let friendlyError = error.message
      if (error.message.includes('Password should be at least')) {
        friendlyError = 'A senha deve ter pelo menos 6 caracteres'
      } else if (error.message.includes('Unable to validate email address')) {
        friendlyError = 'Formato de email inv√°lido'
      }
      
      return c.json({ error: friendlyError }, 400)
    }

    if (!data.user) {
      return c.json({ error: 'Falha ao criar usu√°rio' }, 500)
    }

    console.log(`‚úÖ Usu√°rio criado no Supabase: ${data.user.id}`)

    // Criar usu√°rio no nosso sistema
    const user = {
      id: data.user.id,
      username: username.toLowerCase(),
      createdAt: data.user.created_at,
      points: 0,
      totalPoints: 0,
      rank: 1,
      achievements: [],
      avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${username}`,
      joinedAt: new Date().toISOString()
    }

    console.log(`üíæ REGISTRO: Salvando dados no KV store...`)
    await kv.set(`user:${username.toLowerCase()}`, user)
    await kv.set(`user:id:${data.user.id}`, username.toLowerCase())

    console.log(`üìä REGISTRO: Atualizando leaderboard...`)
    // Atualizar leaderboard
    await updateLeaderboard()

    console.log(`‚úÖ REGISTRO: Processo completo para ${username.toLowerCase()}`)
    console.log(`‚úÖ REGISTRO: Usu√°rio pode fazer login com: ${username.toLowerCase()}@sistematics.local`)

    return c.json({ 
      success: true, 
      user: user,
      message: 'Usu√°rio criado com sucesso'
    })
  } catch (error) {
    console.error('‚ùå Erro no registro:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})

// üìä PONTOS - Adicionar ponto (requer autentica√ß√£o)
app.post('/make-server-cc2c4d6e/points/add', authMiddleware, async (c) => {
  try {
    const { reason, points } = await c.req.json()
    const currentUser = c.get('currentUser')
    const supabaseUser = c.get('supabaseUser')
    
    if (!currentUser || !supabaseUser) {
      console.error('‚ùå Usu√°rio n√£o encontrado no contexto de autentica√ß√£o')
      return c.json({ error: 'Usu√°rio n√£o autenticado' }, 401)
    }
    
    const username = currentUser.username
    
    console.log(`üéØ Tentativa de adicionar ponto: ${username}, ${reason}, ${points}`)
    
    // Buscar usu√°rio atualizado do banco para garantir dados consistentes
    const user = await kv.get(`user:${username}`)
    if (!user) {
      console.error(`‚ùå Usu√°rio ${username} n√£o encontrado no banco`)
      return c.json({ error: 'Usu√°rio n√£o encontrado' }, 404)
    }
    
    console.log(`üìä Usu√°rio encontrado: ${username} com ${user.totalPoints || 0} pontos totais`)

    // Validar dados de entrada
    if (!reason || typeof points !== 'number' || points <= 0) {
      console.error(`‚ùå Dados inv√°lidos: reason=${reason}, points=${points}`)
      return c.json({ error: 'Dados inv√°lidos' }, 400)
    }

    // Atualizar pontos do usu√°rio
    const pontosAntesUpdate = user.totalPoints || 0
    const pontosTemporadaAntes = user.points || 0
    user.points = (user.points || 0) + points // Pontos da temporada atual
    user.totalPoints = (user.totalPoints || 0) + points // Pontos hist√≥ricos totais
    await kv.set(`user:${username}`, user)
    
    console.log(`üìä Pontos atualizados para ${username}:`)
    console.log(`   Total: ${pontosAntesUpdate} -> ${user.totalPoints} (+${points})`)
    console.log(`   Temporada: ${pontosTemporadaAntes} -> ${user.points} (+${points})`)

    // Registrar no hist√≥rico
    const record = {
      id: crypto.randomUUID(),
      username,
      reason,
      points,
      timestamp: new Date().toISOString(),
      date: new Date().toLocaleDateString('pt-BR'),
      avatar: user.avatar
    }

    // Hist√≥rico individual do usu√°rio
    const historyKey = `history:${username}`
    const history = await kv.get(historyKey) || []
    history.unshift(record)
    
    // Manter apenas os √∫ltimos 100 registros
    if (history.length > 100) {
      history.splice(100)
    }
    
    await kv.set(historyKey, history)

    // Hist√≥rico global
    const globalHistory = await kv.get('history:global') || []
    globalHistory.unshift(record)
    
    // Manter apenas os √∫ltimos 500 registros globais
    if (globalHistory.length > 500) {
      globalHistory.splice(500)
    }
    
    await kv.set('history:global', globalHistory)

    // Atualizar leaderboard
    await updateLeaderboard()

    // Verificar conquistas
    await checkAchievements(username, user)

    return c.json({ 
      success: true, 
      user: { ...user, password: undefined },
      record 
    })
  } catch (error) {
    console.error('Erro ao adicionar ponto:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})

// üèÜ LEADERBOARD - Buscar ranking (p√∫blico)
app.get('/make-server-cc2c4d6e/leaderboard', publicMiddleware, async (c) => {
  try {
    const leaderboard = await kv.get('leaderboard:current') || []
    return c.json({ success: true, leaderboard })
  } catch (error) {
    console.error('Erro ao buscar leaderboard:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})

// üìã HIST√ìRICO - Buscar registros individuais (requer autentica√ß√£o)
app.get('/make-server-cc2c4d6e/history/:username', authMiddleware, async (c) => {
  try {
    const username = c.req.param('username')
    const page = parseInt(c.req.query('page') || '1')
    const limit = parseInt(c.req.query('limit') || '10')
    
    const currentUser = c.get('currentUser')
    const isAuthenticated = c.get('isAuthenticated')
    
    // Verificar se est√° autenticado para ver hist√≥rico
    if (!isAuthenticated) {
      return c.json({ code: 401, message: 'Autentica√ß√£o necess√°ria para ver hist√≥rico' }, 401)
    }
    
    const history = await kv.get(`history:${username}`) || []
    
    const startIndex = (page - 1) * limit
    const endIndex = startIndex + limit
    const pageHistory = history.slice(startIndex, endIndex)
    
    return c.json({ 
      success: true, 
      history: pageHistory,
      total: history.length,
      page,
      totalPages: Math.ceil(history.length / limit)
    })
  } catch (error) {
    console.error('Erro ao buscar hist√≥rico:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})

// üìã HIST√ìRICO - Buscar registros globais (p√∫blico)
app.get('/make-server-cc2c4d6e/history/global/recent', publicMiddleware, async (c) => {
  try {
    const page = parseInt(c.req.query('page') || '1')
    const limit = parseInt(c.req.query('limit') || '10')
    
    const globalHistory = await kv.get('history:global') || []
    
    const startIndex = (page - 1) * limit
    const endIndex = startIndex + limit
    const pageHistory = globalHistory.slice(startIndex, endIndex)
    
    return c.json({ 
      success: true, 
      history: pageHistory,
      total: globalHistory.length,
      page,
      totalPages: Math.ceil(globalHistory.length / limit)
    })
  } catch (error) {
    console.error('Erro ao buscar hist√≥rico global:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})

// üë• USU√ÅRIOS - Buscar todos (p√∫blico)
app.get('/make-server-cc2c4d6e/users', publicMiddleware, async (c) => {
  try {
    const userKeys = await kv.getByPrefix('user:')
    const users = userKeys
      .filter(item => !item.key.includes('user:id:'))
      .map(item => {
        const { password, ...userWithoutPassword } = item.value
        return userWithoutPassword
      })
      .sort((a, b) => b.totalPoints - a.totalPoints)
    
    return c.json({ success: true, users })
  } catch (error) {
    console.error('Erro ao buscar usu√°rios:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})

// üë§ USU√ÅRIO - Buscar perfil espec√≠fico (requer autentica√ß√£o)
app.get('/make-server-cc2c4d6e/user/:username', authMiddleware, async (c) => {
  try {
    const username = c.req.param('username')
    const isAuthenticated = c.get('isAuthenticated')
    
    if (!isAuthenticated) {
      return c.json({ code: 401, message: 'Autentica√ß√£o necess√°ria para ver perfil' }, 401)
    }
    
    const user = await kv.get(`user:${username}`)
    if (!user) {
      return c.json({ error: 'Usu√°rio n√£o encontrado' }, 404)
    }
    
    const { password, ...userWithoutPassword } = user
    return c.json({ success: true, user: userWithoutPassword })
  } catch (error) {
    console.error('Erro ao buscar perfil do usu√°rio:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})



// üîÑ REAL-TIME - Status do servidor (p√∫blico)
app.get('/make-server-cc2c4d6e/status', publicMiddleware, async (c) => {
  try {
    const userKeys = await kv.getByPrefix('user:')
    const totalUsers = userKeys.filter(item => !item.key.includes('user:id:')).length
    
    return c.json({ 
      success: true, 
      status: 'online',
      totalUsers,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('Erro ao buscar status:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})

// üîÑ ADMIN - Limpar usu√°rios antigos (usu√°rios no KV que n√£o est√£o no Supabase Auth)
app.post('/make-server-cc2c4d6e/admin/cleanup-users', publicMiddleware, async (c) => {
  try {
    console.log('üßπ Iniciando limpeza de usu√°rios antigos...')
    
    const userKeys = await kv.getByPrefix('user:')
    const usersToCheck = userKeys.filter(item => !item.key.includes('user:id:'))
    
    let usersRemoved = 0
    let usersKept = 0
    
    for (const userItem of usersToCheck) {
      const user = userItem.value
      if (user && user.username) {
        try {
          // Verificar se o usu√°rio existe no Supabase Auth
          const email = `${user.username}@sistematics.local`
          const { data, error } = await supabase.auth.admin.getUserByEmail(email)
          
          if (error || !data.user) {
            // Usu√°rio n√£o existe no Supabase Auth, remover do KV
            console.log(`üóëÔ∏è Removendo usu√°rio antigo: ${user.username}`)
            await kv.del(`user:${user.username}`)
            if (user.id) {
              await kv.del(`user:id:${user.id}`)
            }
            // Remover hist√≥rico tamb√©m
            await kv.del(`history:${user.username}`)
            usersRemoved++
          } else {
            console.log(`‚úÖ Mantendo usu√°rio v√°lido: ${user.username}`)
            usersKept++
          }
        } catch (checkError) {
          console.error(`‚ùå Erro ao verificar usu√°rio ${user.username}:`, checkError)
          // Em caso de d√∫vida, manter o usu√°rio
          usersKept++
        }
      }
    }
    
    // Atualizar leaderboard ap√≥s limpeza
    await updateLeaderboard()
    
    // Limpar e recriar hist√≥rico global apenas com usu√°rios v√°lidos
    const remainingUsers = await kv.getByPrefix('user:')
    const validUsernames = remainingUsers
      .filter(item => !item.key.includes('user:id:'))
      .map(item => item.value.username)
    
    const currentGlobalHistory = await kv.get('history:global') || []
    const cleanedGlobalHistory = currentGlobalHistory.filter(record => 
      validUsernames.includes(record.username)
    )
    
    await kv.set('history:global', cleanedGlobalHistory)
    
    console.log(`üèÅ Limpeza conclu√≠da! ${usersRemoved} usu√°rios removidos, ${usersKept} usu√°rios mantidos`)
    
    return c.json({
      success: true,
      message: `Limpeza conclu√≠da! ${usersRemoved} usu√°rios antigos removidos, ${usersKept} usu√°rios v√°lidos mantidos`,
      usersRemoved,
      usersKept,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('Erro na limpeza de usu√°rios:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})

// üîÑ ADMIN - Reset de temporada (resetar pontos de todos os usu√°rios)
app.post('/make-server-cc2c4d6e/admin/reset-season', publicMiddleware, async (c) => {
  try {
    console.log('üîÑ Iniciando reset da temporada...')
    
    const userKeys = await kv.getByPrefix('user:')
    const users = userKeys.filter(item => !item.key.includes('user:id:'))
    
    let usersReset = 0
    
    // Resetar pontos de todos os usu√°rios
    for (const userItem of users) {
      const user = userItem.value
      if (user && user.username) {
        user.points = 0 // Zerar pontos da temporada atual
        // Manter totalPoints como hist√≥rico
        user.rank = 1 // Resetar ranking
        
        await kv.set(`user:${user.username}`, user)
        usersReset++
        
        console.log(`‚úÖ Reset pontos do usu√°rio: ${user.username}`)
      }
    }
    
    // Atualizar leaderboard
    await updateLeaderboard()
    
    // Limpar hist√≥rico global se desejado (opcional)
    await kv.set('history:global', [])
    
    console.log(`üèÅ Reset da temporada conclu√≠do! ${usersReset} usu√°rios resetados`)
    
    return c.json({ 
      success: true, 
      message: `Temporada resetada com sucesso! ${usersReset} usu√°rios afetados`,
      usersReset,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('Erro no reset da temporada:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})













// üèÜ CONQUISTAS - Buscar conquistas de um usu√°rio
app.get('/make-server-cc2c4d6e/achievements/:username', authMiddleware, async (c) => {
  try {
    const username = c.req.param('username')
    const user = await kv.get(`user:${username}`)
    
    if (!user) {
      return c.json({ error: 'Usu√°rio n√£o encontrado' }, 404)
    }

    return c.json({ 
      success: true, 
      achievements: user.achievements || [],
      totalPoints: user.totalPoints || 0,
      rank: user.rank || 0
    })
  } catch (error) {
    console.error('Erro ao buscar conquistas:', error)
    return c.json({ error: 'Erro interno do servidor' }, 500)
  }
})

// üîß FUN√á√ïES AUXILIARES

async function updateLeaderboard() {
  try {
    const userKeys = await kv.getByPrefix('user:')
    const users = userKeys
      .filter(item => !item.key.includes('user:id:'))
      .map(item => {
        const { password, ...userWithoutPassword } = item.value
        return userWithoutPassword
      })
      .sort((a, b) => (b.totalPoints || 0) - (a.totalPoints || 0)) // Corrigido: usar totalPoints
      .map((user, index) => ({
        ...user,
        rank: index + 1
      }))

    await kv.set('leaderboard:current', users)
    
    // Atualizar rank de cada usu√°rio
    for (const user of users) {
      const fullUser = await kv.get(`user:${user.username}`)
      if (fullUser) {
        fullUser.rank = user.rank
        await kv.set(`user:${user.username}`, fullUser)
      }
    }
    
    console.log(`üèÜ Leaderboard atualizado com ${users.length} usu√°rios`)
  } catch (error) {
    console.error('Erro ao atualizar leaderboard:', error)
  }
}

async function checkAchievements(username: string, user: any) {
  try {
    const achievements = [
      // Conquistas de Pontos
      { id: 'first_point', name: 'Primeiro Passo', description: 'Registrou seu primeiro ponto', icon: 'üéØ', condition: async () => user.totalPoints >= 1 },
      { id: 'five_points', name: 'Aquecendo', description: 'Acumulou 5 pontos', icon: 'üî•', condition: async () => user.totalPoints >= 5 },
      { id: 'ten_points', name: 'Dez na √Årea', description: 'Acumulou 10 pontos', icon: '‚ö°', condition: async () => user.totalPoints >= 10 },
      { id: 'twenty_five_points', name: 'Subindo o N√≠vel', description: 'Acumulou 25 pontos', icon: 'üìà', condition: async () => user.totalPoints >= 25 },
      { id: 'fifty_points', name: 'Meio S√©culo', description: 'Acumulou 50 pontos', icon: 'üéä', condition: async () => user.totalPoints >= 50 },
      { id: 'hundred_points', name: 'Centena', description: 'Acumulou 100 pontos', icon: 'üíØ', condition: async () => user.totalPoints >= 100 },
      { id: 'two_hundred_points', name: 'Dobrou a Meta', description: 'Acumulou 200 pontos', icon: 'üöÄ', condition: async () => user.totalPoints >= 200 },
      { id: 'five_hundred_points', name: 'Quinhentos!', description: 'Acumulou 500 pontos', icon: 'üèÜ', condition: async () => user.totalPoints >= 500 },
      { id: 'thousand_points', name: 'Milhar', description: 'Acumulou 1000 pontos', icon: 'üëë', condition: async () => user.totalPoints >= 1000 },
      
      // Conquistas de Ranking
      { id: 'top_10', name: 'Top 10', description: 'Ficou entre os 10 primeiros', icon: 'üîü', condition: async () => user.rank <= 10 },
      { id: 'top_5', name: 'Top 5', description: 'Ficou entre os 5 primeiros', icon: '‚úã', condition: async () => user.rank <= 5 },
      { id: 'top_3', name: 'P√≥dio', description: 'Ficou entre os 3 primeiros', icon: 'ü•â', condition: async () => user.rank <= 3 },
      { id: 'second_place', name: 'Vice-Campe√£o', description: 'Alcan√ßou o 2¬∫ lugar', icon: 'ü•à', condition: async () => user.rank === 2 },
      { id: 'leader', name: 'Campe√£o', description: 'Alcan√ßou o 1¬∫ lugar', icon: 'ü•á', condition: async () => user.rank === 1 },
      
      // Conquistas Sociais
      { id: 'first_friend', name: 'Soci√°vel', description: 'Fez seu primeiro amigo', icon: 'üë•', condition: async () => (user.friends?.length || 0) >= 1 },
      { id: 'five_friends', name: 'Popular', description: 'Tem 5 amigos', icon: 'üéâ', condition: async () => (user.friends?.length || 0) >= 5 },
      { id: 'ten_friends', name: 'Networking Master', description: 'Tem 10 amigos', icon: 'üåü', condition: async () => (user.friends?.length || 0) >= 10 },
      
      // Conquistas Especiais
      { id: 'early_adopter', name: 'Early Adopter', description: 'Um dos primeiros usu√°rios', icon: 'üöÄ', condition: async () => user.id && new Date(user.createdAt) < new Date('2025-01-01') },
      { id: 'consistent_player', name: 'Consistente', description: 'Registrou pontos por 7 dias seguidos', icon: 'üìÖ', condition: async () => await checkConsistency(username) },
      { id: 'night_owl', name: 'Coruja', description: 'Registrou pontos depois da meia-noite', icon: 'ü¶â', condition: async () => await checkNightActivity(username) },
      { id: 'morning_bird', name: 'Madrugador', description: 'Registrou pontos antes das 6h', icon: 'üåÖ', condition: async () => await checkMorningActivity(username) },
      
      // Conquistas Tem√°ticas
      { id: 'henaldo_hunter', name: 'Ca√ßador de Henaldo', description: 'Xingou o Henaldo 10 vezes', icon: 'üéØ', condition: async () => await checkSpecificReason(username, 'xingar-henaldo', 10) },
      { id: 'perfect_student', name: 'Aluno Exemplar', description: 'Tirou total em avalia√ß√£o 5 vezes', icon: 'üìö', condition: async () => await checkSpecificReason(username, 'avaliacao-total', 5) },
      { id: 'helper', name: 'Colaborativo', description: 'Ajudou colegas 15 vezes', icon: 'ü§ù', condition: async () => await checkSpecificReason(username, 'ajudar-colega', 15) },
      { id: 'expo_winner', name: 'Campe√£o da ExpoTech', description: 'Ganhou primeiro lugar na ExpoTech', icon: 'üèÜ', condition: async () => await checkSpecificReason(username, 'primeiro-expotech', 1) },
      { id: 'expo_runner_up', name: 'Vice na ExpoTech', description: 'Ficou em segundo na ExpoTech', icon: 'ü•à', condition: async () => await checkSpecificReason(username, 'segundo-expotech', 1) },
    ]

    const userAchievements = user.achievements || []
    const newAchievements = []

    console.log(`üîç Verificando conquistas para ${username} com ${user.totalPoints} pontos totais`)
    console.log(`üìä Conquistas atuais do usu√°rio: ${userAchievements.length}`)
    
    for (const achievement of achievements) {
      const hasAchievement = userAchievements.find(a => a.id === achievement.id)
      if (!hasAchievement) {
        try {
          const conditionMet = await achievement.condition()
          console.log(`üéØ Testando ${achievement.name} (${achievement.id}): ${conditionMet}`)
          if (conditionMet) {
            const newAchievement = {
              ...achievement,
              unlockedAt: new Date().toISOString()
            }
            userAchievements.push(newAchievement)
            newAchievements.push(newAchievement)
            console.log(`üèÜ Nova conquista desbloqueada para ${username}: ${achievement.name}`)
          }
        } catch (error) {
          console.error(`‚ùå Erro ao verificar conquista ${achievement.id}:`, error)
        }
      } else {
        console.log(`‚úÖ J√° possui: ${achievement.name}`)
      }
    }

    if (newAchievements.length > 0) {
      user.achievements = userAchievements
      await kv.set(`user:${username}`, user)
      console.log(`‚úÖ Salvas ${newAchievements.length} novas conquistas para ${username}`)
    }
  } catch (error) {
    console.error('Erro ao verificar conquistas:', error)
  }
}

// Fun√ß√µes auxiliares para conquistas espec√≠ficas
async function checkConsistency(username: string): Promise<boolean> {
  // Por enquanto retorna false, implementar l√≥gica de dias consecutivos
  return false
}

async function checkNightActivity(username: string): Promise<boolean> {
  // Por enquanto retorna false, implementar verifica√ß√£o de hor√°rio
  return false
}

async function checkMorningActivity(username: string): Promise<boolean> {
  // Por enquanto retorna false, implementar verifica√ß√£o de hor√°rio
  return false
}

async function checkSpecificReason(username: string, reason: string, count: number): Promise<boolean> {
  try {
    const history = await kv.get(`history:${username}`) || []
    const reasonCount = history.filter(record => record.reason === reason).length
    return reasonCount >= count
  } catch {
    return false
  }
}

console.log('üöÄ Servidor Sistem√°ticos de Plant√£o iniciado!')

Deno.serve(app.fetch)